Define macros for error checking and reporting:

  warn(format, ...);
    Call dprintf(STDERR_FILENO, format, ...) prepending program name
    plus colon and space, and appending newline.  Return the result
    of dprintf().

  error(format, ...);
    Call warn() then exit(EXIT_FAILURE).  Do not return.

  die(format, ...);
    Call warn() prepending source file name and line number, then
    _Exit(EXIT_FAILURE).  Do not return.

  SYS(expr);
  SYS(expr, format, ...);
    Evaluate expression 'expr' (normally a system call).  If 'expr'
    yields -1 then call die() and do not return (when 'format, ...'
    is provided it will be appended to the message).  Otherwise
    return the result of 'expr'.  For instance:

      int fd = SYS(open(path, O_RDONLY));

    will set fd to file descriptor if open() succeeded, or will
    die() with the message like

      program: source.c:123: open(path, O_RDONLY) == -1: No such file or directory

    Passing 'format, ...' as in

      int fd = SYS(open(path, O_RDONLY), ": %s", path);

    will produce

      program: source.c:123: open(path, O_RDONLY) == -1: No such file or directory: /no/such/path

    Be aware that not all system calls return -1 on error.  Check
    manual page before using SYS().

  MEM(expr);
  MEM(expr, format, ...);
    Like SYS(), but check for NULL.  For instance to die() on failed
    realloc() it is safe to write

      ptr = MEM(realloc(ptr, size));


  POSIX(expr);
  POSIX(expr, format, ...);
    Like SYS(), but expect 'expr' to return error value directly
    instead of setting 'errno'.  Do not return when 'expr' yields
    non-zero.  For instance

      POSIX(pthread_key_create(&key, NULL));


  CHECK(expr, cond, action, format, ...);
    Generic macro that implements SYS() and MEM().  May be used like

      void *ptr = CHECK(mmap(NULL, length, PROT_READ | PROT_WRITE,
                             MAP_PRIVATE | MAP_ANONYMOUS, -1, 0),
                        == MAP_FAILED, die, "%m (length=%zu)", length);

    (note the comma that separates arguments 'expr' (mmap()) and
    'cond' (== MAP_FAILED)).

  ERRNO(expr, action, format, ...);
    Generic macro that implements POSIX().  When 'expr' yields
    non-zero set global 'errno' to the returned value and execute
    'action' passing 'format, ...' to it.  If 'action' returns then
    old value of 'errno' is restored.  May be used like

      ERRNO(posix_fallocate(fd, 0, size), warn, "%m: %zu", (size_t) size);


  RESTART(expr);
    Evaluate 'expr' (normally blocking system call).  When 'expr'
    yields -1 and errno == EINTR the expression is re-evaluated.
    Otherwise return the result of 'expr'.  For instance

      SYS(RESTART(connect(sock, addr, sizeof(addr))));

    Note that the reverse nesting RESTART(SYS(...)) is meaningless
    as SYS() will die on EINTR.

  char *program_invocation_short_name;
    Program name (argv[0]) with path prefix up to last '/' removed.

Defining KROKI_ERROR_NOPOLLUTE will result in omitting alias
definitions, but functionality will still be available with the
namespace prefix 'kroki_'.

Implementation requires GCC and Glibc.
